 	.syntax unified
 	.cpu cortex-m3
 	.thumb
 	.align 2
 	.global	classification
 	.thumb_func

@ CG2028 Assignment, Sem 2, AY 2021/21
@ (c) CG2028 Teaching Team, ECE NUS, 2021

@ student 1: Name: Nigel Ng, Matriculation No.: A0217408H
@ student 2: Name: , Matriculation No.:
@ eg: student 1: Name: John Doe , Matriculation No.: A021234N

@Register map
@R0 - N, returns class
@R1 - points
@R2 - label
@R3 - sample
@R4 - register for storing intermediate variables for euclidean distance
@R5 - register for storing intermediate variables for euclidean distance
@R6 - intermediate pointer for storage
@....

classification:
@ PUSH / save (only those) registers which are modified by your function
		PUSH {R1-R4,R14}
@ parameter registers need not be saved.

@ write asm function body here

@ extract sample_x
@LDR R6, =sample_x	@ gets pointer to sample_x
@LDR R3,[R3]	@ post offset of sample to prepare for loading sample_y #4
@STR R3,[R6]	@ stores x coordinate of sample to sample_x

@ extract sample_y
@LDR R6,=sample_y
@STR R3,[R6]	@ since we have offset the address of r3, the value of R3 should be sample_y

@ branch to GET_EUCLIDEAN TO check if curr_distance is smaller than min_distance
		@BL GET_EUCLIDEAN

@ increment count, check if count == N. if so, go to next line

@ prepare value to return (class) to C program in R0
@ the #5 here is an arbitrary result
		LDR R0, sample_x
		@MOVW R0, #5
@ POP / restore original register values. DO NOT save or restore R0. Why?
		POP {R1-R4,R14}
@ return to C program
		BX	LR

@ you could write your code without SUBROUTINE
GET_EUCLIDEAN:

		BX LR

@label: .word value
count: .word 0	@declares count = 0, used for stopping iteration
min_distance: .word 0xFFFFFFFF	@initialises min distance to max value
sample_x: .word 69
sample_y: .word 0

@.lcomm label num_bytes
